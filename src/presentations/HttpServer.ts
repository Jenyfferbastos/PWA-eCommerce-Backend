import 'reflect-metadata';
import express from 'express';
import swaggerUI from 'swagger-ui-express';
import { useContainer } from 'routing-controllers';
import { injectable } from 'inversify';
import { useExpressServer } from 'routing-controllers';
import httpContext from 'express-http-context';

import { container } from 'src/config/container';
import { SwaggerSetup } from 'docs/SwaggerSetup';
import { AbstractServer } from 'src/presentations/AbstractServer';
import { UserController } from './controllers/UserController';
import { OrdersController } from './controllers/OrdersController';
import { ProductsController } from 'src/presentations/controllers/ProductsController';
import { ErrorSerializationMiddleware } from './middlewares/ErrorSerializationMiddleware';

@injectable()
export class HttpServer implements AbstractServer {
  public start() {
    return new Promise((resolve) => {
      const appPort = process.env.APPLICATION_PORT || process.env.PORT;
      resolve(this.createServer().listen(appPort));
    });
  }

  public createServer() {
    useContainer(container);
    const app = express();

    app.use(httpContext.middleware);

    app.use(
      '/api-docs',
      swaggerUI.serve,
      swaggerUI.setup(SwaggerSetup.getSwaggerAutoGeneratedSchema()),
    );

    app.use(express.json());

    return useExpressServer(app, {
      routePrefix: '',
      cors: true,
      middlewares: [ErrorSerializationMiddleware],
      defaultErrorHandler: false,
      controllers: [UserController, OrdersController, ProductsController],
      validation: true,
    });
  }
}
